{"version":3,"sources":["src/index.js"],"names":["createReducer","initialState","registry","reducer","state","action","reducers","type","reduce","plug","register","Error","actionTypes","concat","forEach","push"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAMA,wCAAgB,SAAhBA,aAAgB,GAAuB;AAAA,MAAtBC,YAAsB,uEAAP,EAAO;;;AAElD,MAAMC,WAAW,EAAjB;;AAEA,MAAMC,UAAU,SAAVA,OAAU,GAAkC;AAAA,QAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,QAAXI,MAAW;;AAChD,QAAMC,WAAWJ,SAASG,OAAOE,IAAhB,CAAjB;AACA,QAAID,QAAJ,EAAc;AACZ,aAAOA,SAASE,MAAT,CAAgB,UAACJ,KAAD,EAAQD,OAAR,EAAoB;AACzC,eAAOA,QAAQC,KAAR,EAAeC,MAAf,CAAP;AACD,OAFM,EAEJD,KAFI,CAAP;AAGD,KAJD,MAIO;AACL,aAAOA,KAAP;AACD;AACF,GATD;;AAWAD,UAAQM,IAAR,GAAe,oBAAY;AACzB,QAAMA,OACJ,OAAOC,QAAP,KAAoB,UAApB,GAAiCA,QAAjC,GACA,OAAOA,SAASD,IAAhB,KAAyB,UAAzB,GAAsCC,SAASD,IAA/C,GACA,IAHF;AAIA,QAAI,SAASA,IAAb,EAAmB;AACjB,YAAM,IAAIE,KAAJ,CAAU,kEAAV,CAAN;AACD;AACD;AACA;AACAF,SAAK,UAACG,WAAD,EAAcT,OAAd,EAA0B;AAC7BS,oBAAc,GAAGC,MAAH,CAAUD,WAAV,CAAd,CAD6B,CACQ;AACrCA,kBAAYE,OAAZ,CAAoB,gBAAQ;AAC1B,YAAI,CAAEZ,SAASK,IAAT,CAAN,EAAsB;AACpBL,mBAASK,IAAT,IAAiB,EAAjB;AACD;AACDL,iBAASK,IAAT,EAAeQ,IAAf,CAAoBZ,OAApB;AACD,OALD;AAMD,KARD;AASA,WAAOA,OAAP,CAnByB,CAmBV;AAChB,GApBD;;AAsBA,SAAOA,OAAP;AACD,CAtCM","file":"dist/redux-plug.js","sourcesContent":["export const createReducer = (initialState = {}) => {\r\n\r\n  const registry = {}\r\n\r\n  const reducer = (state = initialState, action) => {\r\n    const reducers = registry[action.type]\r\n    if (reducers) {\r\n      return reducers.reduce((state, reducer) => {\r\n        return reducer(state, action)\r\n      }, state)\r\n    } else {\r\n      return state\r\n    }\r\n  }\r\n\r\n  reducer.plug = register => {\r\n    const plug =\r\n      typeof register === 'function' ? register :\r\n      typeof register.plug === 'function' ? register.plug :\r\n      null\r\n    if (null === plug) {\r\n      throw new Error(\"reducer.plug expects a function or an object with a plug method.\")\r\n    }\r\n    // Call the reducer module function with a function that waits for action\r\n    // types and corresponding reducer\r\n    plug((actionTypes, reducer) => {\r\n      actionTypes = [].concat(actionTypes) // Handle a single action or array\r\n      actionTypes.forEach(type => {\r\n        if (! registry[type]) {\r\n          registry[type] = []\r\n        }\r\n        registry[type].push(reducer)\r\n      })\r\n    })\r\n    return reducer // allows to chain plugs\r\n  }\r\n\r\n  return reducer\r\n}\r\n"]}